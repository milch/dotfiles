" Incompatible to vi
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

"Language support
Bundle 'markschabacker/cocoa.vim.git'
Bundle "sheerun/vim-polyglot"

"Search, Navigation, etc.
Bundle "Shougo/unite.vim"
Bundle "Shougo/unite-outline"
Bundle "ujihisa/unite-colorscheme"
Bundle "ervandew/supertab"
Bundle "xolox/vim-easytags"

"Aesthetics
Bundle 'skwp/vim-colors-solarized.git'
Bundle 'bling/vim-airline'

"SCM
Bundle 'mhinz/vim-signify'
Bundle 'tpope/vim-fugitive.git'

"Autocomplete, Snippets, Syntax
Bundle 'Valloric/YouCompleteMe'
Bundle 'Raimondi/delimitMate'
Bundle 'SirVer/ultisnips'
Bundle "scrooloose/syntastic"

"Misc
Bundle "Shougo/vimproc"
Bundle 'sickill/vim-pasta.git'
Bundle 'tsaleh/vim-matchit.git'
Bundle 'kshenoy/vim-signature'
Bundle 'tpope/vim-dispatch'
Bundle "xolox/vim-misc"


" How many lines of history VIM remembers
set history=1000

" Enables syntax highlighting
syntax on

" Enable plugins based on filetype
filetype plugin indent on

" Solarized all the way
set background=dark
colorscheme solarized

" Leader -> to prefix your own keybindings
let mapleader = ","

" Tab doesn't expand, Tab-Size is 4 spaces (all Hail the Tab-God)
set softtabstop=4
set shiftwidth=4

" Smart indentation of lines
set smartindent

" Enables Statusbar
set laststatus=2

" Highlight searches & searches while typing
set hlsearch
set incsearch

" For regular expressions
set magic

" Highlight matching brackets
set showmatch

" No error sounds
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Ignore case when searching, but not if keywords are capitalized
set ignorecase smartcase

" Turn off backups
set nobackup
set nowb
set noswapfile

" Allows Backspace to loop over everything
set backspace=indent,eol,start

" No Arrow keys
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" Viewport will move if Cursor is 10 lines away from the edge
set so=10

" Show current position
set ruler

" Height of the command bar
set cmdheight=1

" Automatically reload file when it is changed from the outside
set autoread

" Set default encoding to utf-8
set encoding=utf8

" Change split with Ctrl+Direction
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

set rnu "relative line numbers

set guioptions-=T "No top toolbar
set guioptions-=r "no right scrollbar
set guioptions-=L "no left scrollbar

set completeopt=menu,menuone,longest

let g:airline_powerline_fonts=1
let g:airline_theme='powerlineish'

let g:easytags_updatetime_warn=0

let g:signify_sign_weight = "NONE"
let g:signify_sign_color_inherit_from_linenr = 1
let g:signify_sign_change = "~"
let g:signify_sign_change_delete = "~_"

let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"

" Make UltiSnips compatible with YCM
let g:ycm_key_list_select_completion=["<C-Tab>", "<Down>"]
let g:ycm_key_list_previous_completion=["<C-S-Tab>", "<Up>"]
let g:SuperTabDefaultCompletionType="<C-Tab>"

" Enable Omnicomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Syntastic
let g:syntastic_error_symbol="✗"
let g:syntastic_warning_symbol="!"
let g:syntastic_style_warning_symbol='⚡'
let g:syntastic_style_error_symbol='⚡'

" Unite
call unite#filters#matcher_default#use(["matcher_fuzzy"])
call unite#custom#source("file_rec", "ignore_pattern", "CMake.*")
let g:unite_winheight = 10
let g:unite_split_rule='botright'
let g:unite_source_history_yank_enable=1

if executable('ag')
    let g:unite_source_grep_command='ag'
    let g:unite_source_grep_default_opts='--nocolor --nogroup -a -S'
    let g:unite_source_grep_recursive_opt=''
    let g:unite_source_grep_search_word_highlight = 1
elseif executable('ack')
    let g:unite_source_grep_command='ack'
    let g:unite_source_grep_default_opts='--no-group --no-color'
    let g:unite_source_grep_recursive_opt=''
    let g:unite_source_grep_search_word_highlight = 1
endif

nnoremap <leader>p :<C-u>Unite -start-insert file_rec<CR>
nnoremap <leader>pr :<C-u>Unite -start-insert file_mru<CR>
nnoremap <leader>y :<C-u>Unite -start-insert history/yank<CR>
nnoremap <leader>f :<C-u>Unite -no-quit grep<CR>
nnoremap <leader>t :<C-u>Unite -vertical -winwidth=40 -direction=topleft -toggle outline<CR>
